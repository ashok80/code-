# from sqlalchemy import Column, String, Integer, Float, Date, DateTime, ForeignKey
# from sqlalchemy.orm import relationship
# from tabledata.base import Base
#
#
# class BH_GM_DOCK(Base):
#     __tablename__ = "bh_gm_dock"
#     __table_args__ = {'extend_existing': True}
#     bh_gm_dock_id = Column(Integer, primary_key=True, autoincrement=True)
#     location = Column(Integer, ForeignKey('location.location_id'), nullable=True)
#     billing_cisco = Column(Integer)
#     location_code = Column(String)
#     duns = Column(String)
#     facility_name = Column(String)
#     city = Column(String)
#     state = Column(String)
#     zip_code = Column(String)
#     dock_code = Column(String)
#     simplified_dock = Column(String)
#     no_of_shifts = Column(Integer)
#     drop_deck_allowed_yn = Column(String)
#     dock_bump_yn = Column(String)
#     max_dock_bumps_allowed = Column(Integer)
#     date_entered = Column(Date)
#     notes = Column(String)
#     co_locate = Column(Integer)
#     source = Column(String)
#
#
# class LOCATION(Base):
#     __tablename__ = "location"
#     __table_args__ = {'extend_existing': True}
#     location_id = Column(Integer, primary_key=True)
#     locationid = Column(String)
#     location_name = Column(String)
#     city = Column(String)
#     state = Column(String)
#     state_prov_code = Column(String)
#     postal_code = Column(String)
#     country = Column(String)
#     time_zone_gid = Column(String)
#     latitude = Column(Float)
#     longitude = Column(Float)
#     location_type = Column(String)
#     locode = Column(String)
#     create_dt = Column(Date)
#     update_dt = Column(Date)
#     duns = Column(String)
#     address1 = Column(String)
#     address2 = Column(String)
#     street = Column(String)
#     phone = Column(String)
#     fax = Column(String)
#     email = Column(String)
#     contact_person = Column(String)
#     pickup_time_start = Column(String)
#     pickup_time_end = Column(String)
#     status = Column(String)
#     active = Column(String)
#     zip_city = Column(String)
#     location_office_type = Column(String)
#     alternate_duns = Column(String)
#     cisco_code = Column(String)
#     plant_code_2_letter = Column(String)
#     alternate_pk = Column(Integer)
#     batchid = Column(String)
#     record_status = Column(String)
#     message_tx = Column(String)
#     country_code = Column(String)
#     drc_supplier_load = Column(Integer)
#     source = Column(String)
#     schedule_date = Column(DateTime)
#     pickup_volume = Column(Float)
#     loading_time_per_ton_in_mins = Column(Float)
#     filter_status = Column(String)
#     alt_location_name = Column(String)
#     logistics_type = Column(String)
#     billing_cisco = Column(String)
#
# class DQ_FAILURE(Base):
#     __table_args__ = {'extend_existing': True}
#     __tablename__ = "dq_failure"
#     dq_failure_id = Column(Integer, primary_key=True)
#     batchid = Column(String)
#     entity_id = Column(String)
#     entity = Column(String)
#     business_rule = Column(String)
#     create_date = Column(DateTime)
#     dq_dimension = Column(String)
#     column_value = Column(String)
#     fixed_yn = Column(String)
#     fixed_date = Column(DateTime)
#     source = Column(String)
#     column_name = Column(String)
#     error_code = Column(String)
#     table_name = Column(String)
#     frequency = Column(Integer)
#     master_load_id = Column(Integer)
#     transaction_date = Column(DateTime)
#     alt_error_code = Column(String)
